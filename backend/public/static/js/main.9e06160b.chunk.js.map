{"version":3,"sources":["BarChartShare.js","App.js","reportWebVitals.js","index.js"],"names":["CustomizedAxisTick","this","props","x","y","payload","transform","dy","textAnchor","fill","value","Component","BarChartShare","className","width","height","data","margin","top","right","left","bottom","dataKey","tick","reversed","key","domain","strokeDasharray","type","stroke","color","activeDot","r","App","useState","setData","nowDate","setNowDate","call","axios","get","then","response","Date","date","toDateString","forEach","arrayItem","toLocaleTimeString","catch","error","console","log","useEffect","setInterval","graphOne","graphTwo","graphThree","graphFour","class","src","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e06160b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./BarChartShare.css\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from \"recharts\";\n\nclass CustomizedAxisTick extends Component {\n  render() {\n    const { x, y, payload } = this.props;\n\n    return (\n      <g transform={`translate(${x},${y})`}>\n        <text\n          x={0}\n          y={0}\n          dy={16}\n          textAnchor=\"end\"\n          fill=\"#666\"\n          transform=\"rotate(-35)\"\n        >\n          {payload.value}\n        </text>\n      </g>\n    );\n  }\n}\n\nclass BarChartShare extends Component {\n  render() {\n    return (\n      <div className=\"BARCHART\">\n        <LineChart\n          width={540}\n          height={300}\n          data={this.props.data.data}\n          margin={{ top: 30, right: 30, left: 20, bottom: 50 }}\n        >\n          <XAxis dataKey=\"date\" tick={<CustomizedAxisTick />} reversed />\n          <YAxis dataKey={this.props.data.key} domain={[\"auto\", \"auto\"]} />\n          <CartesianGrid strokeDasharray=\"5 5\" />\n          <Tooltip />\n          <Line\n            type=\"monotone\"\n            dataKey={this.props.data.key}\n            stroke={this.props.data.color}\n            activeDot={{ r: 8 }}\n          />\n        </LineChart>\n      </div>\n    );\n  }\n}\n\nexport default BarChartShare;\n","import React, { useEffect, useState } from \"react\";\nimport BarChartShare from \"./BarChartShare\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nfunction App() {\n  const [data, setData] = useState(\"\");\n  const [nowDate, setNowDate] = useState([]);\n  useEffect(() => {\n    call();\n    setInterval(() => {\n      call();\n    }, 30000);\n  }, []);\n  function call() {\n    axios\n      .get(\"/getData\")\n      .then(function (response) {\n        setNowDate(new Date(response.data[0].date).toDateString());\n        response.data.forEach(function (arrayItem) {\n          arrayItem.date = new Date(arrayItem.date).toLocaleTimeString();\n        });\n        setData(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n  const graphOne = { data, key: \"pmt_2_5\", color: \"blue\" };\n  const graphTwo = { data, key: \"aqi_2_5\", color: \"blue\" };\n  const graphThree = { data, key: \"pmt_10\", color: \"red\" };\n  const graphFour = { data, key: \"aqi_10\", color: \"red\" };\n  return (\n    <div className=\"App\">\n      <div class=\"container\">\n        <nav class=\"navbar navbar-light bg-light\">\n          <a class=\"navbar-brand\">Real Time AQI and PM of Santa Clara County</a>\n        </nav>\n        <br/>\n        <p class=\"font-weight-bold\">AQI Table</p>\n        <img src=\"/tq.png\" alt=\"AQI Table\" width=\"648\" height=\"382\"></img>\n        <p class=\"font-weight-bold\">Based on the value of real-time AQI 2.5 you can determine if the air quality is safe.<br/>\n          The numerical value in the table represent the value of AQI 2.5.\n        </p>\n        <div class=\"row\">\n          <div class=\"col\">\n            <br />\n            \n            <p class=\"font-weight-bold\">PM 2.5 Chart Real-Time</p>\n            <BarChartShare data={graphOne} />X Axis = Time (PDT) {nowDate}{\" \"}\n            <br /> Y Axis = PM (Particulate Matter) 2.5\n          </div>\n          <div class=\"col\">\n            <br />\n            <p class=\"font-weight-bold\">AQI 2.5 Chart Real-Time</p>\n            <BarChartShare data={graphTwo} />X Axis = Time (PDT) {nowDate}{\" \"}\n            <br /> Y Axis = AQI (Air Quality Index) 2.5\n          </div>\n        </div>\n        <div className=\"row\">\n          <div class=\"col\">\n            <br />\n            <p class=\"font-weight-bold\">PM 10 Chart Real-Time</p>\n            <BarChartShare data={graphThree} />X Axis = Time (PDT) {nowDate}{\" \"}\n            <br /> Y Axis = PM (Particulate Matter) 10\n          </div>\n          <br />\n          <div class=\"col\">\n            <br />\n            <p class=\"font-weight-bold\">AQI 10 Chart Real-Time</p>\n            <BarChartShare data={graphFour} />X Axis = Time (PDT) {nowDate}{\" \"}\n            <br /> Y Axis = AQI (Air Quality Index) 10\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}